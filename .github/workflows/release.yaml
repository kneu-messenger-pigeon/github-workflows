name: Test and release

on:
  workflow_call:
    inputs:
      skip_test:
        description: 'Skip test'
        required: false
        type: boolean
    secrets:
      TOKEN_TO_RUN_GITHUB_ACTION:
        required: true

jobs:
  test:
    if: ${{ !inputs.skip_test }}
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Setup Golang caches
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-golang-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-golang-

      - name: Set timezone
        run: sudo timedatectl set-timezone "Europe/Kyiv"

      - name: Go module download
        run: go mod download

      - name: Test
        run: |
          go test .  -tags test -coverprofile coverage.out -covermode atomic
          go tool cover -func coverage.out

      - uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Quality Gate - Test coverage shall be above threshold
        env:
          TESTCOVERAGE_THRESHOLD: 100
        run: |
          echo "Quality Gate: checking test coverage is above threshold ..."
          echo "Threshold             : $TESTCOVERAGE_THRESHOLD %"
          totalCoverage=`go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+'`
          echo "Current test coverage : $totalCoverage %"
          if (( $(echo "$totalCoverage $TESTCOVERAGE_THRESHOLD" | awk '{print ($1 >= $2)}') )); then
              echo "OK"
          else
              echo "Current test coverage is below threshold. Please add more unit tests or adjust threshold to a lower value."
              echo "Failed"
              exit 1
          fi

  build:
    needs: test
    # always run build even test skipped
    if: always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    runs-on: ubuntu-22.04
    outputs:
      imageid: ${{ steps.docker_build.outputs.imageid }}
    steps:
      - uses: actions/checkout@v3
      - name: Checkout github-workflows
        uses: actions/checkout@v3
        with:
          repository: kneu-messenger-pigeon/github-workflows
          path: github-workflows

      - name: Make Dockerfile
        run: |
          [ -f Dockerfile ] || cp ./github-workflows/Dockerfile Dockerfile
          [ -f Append.dockerfile ] && echo "" >> Dockerfile && cat Append.dockerfile >> Dockerfile
          echo "" >> .dockerignore && cat ./github-workflows/.dockerignore >> .dockerignore
       # replace all `"/app"` to `/{REPO_NAME}` to have understandable process name in `ps aux`
          sed -i '' "s/\"\/app\"/\"\/$REPOSITORY_NAME\"/g" Dockerfile
          cat Dockerfile
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64,linux/arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: |
            REPOSITORY_NAME=${{ github.event.repository.name }}
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  dispatch-pigeon:
    runs-on: ubuntu-22.04
    needs: build
    if: always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    steps:
      - name: Pigeon App Repository Dispatch
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.TOKEN_TO_RUN_GITHUB_ACTION }}
          repository: kneu-messenger-pigeon/pigeon-app
          event-type: image-built
          client-payload: '{"image": "${{ github.event.repository.name }}", "digest": "${{ needs.build.outputs.imageid }}"}'
